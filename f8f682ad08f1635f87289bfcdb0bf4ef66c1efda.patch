From f8f682ad08f1635f87289bfcdb0bf4ef66c1efda Mon Sep 17 00:00:00 2001
From: wiire <wi7ire@gmail.com>
Date: Thu, 27 Apr 2017 21:00:59 +0200
Subject: [PATCH] Added OUI and WPS tag info

---
 src/80211.c  | 44 ++++++++++++++++++++++++++++++++++++++++++++
 src/80211.h  |  6 ++++--
 src/Makefile |  2 +-
 src/bully.c  | 20 ++++++++++++++++++++
 src/pdust.c  | 42 ++++++++++++++++++++++++++++++++++++++++++
 src/pdust.h  | 45 +++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 156 insertions(+), 3 deletions(-)
 create mode 100644 src/pdust.c
 create mode 100644 src/pdust.h

diff --git a/src/80211.c b/src/80211.c
index df36c8d..907d70d 100644
--- a/src/80211.c
+++ b/src/80211.c
@@ -129,6 +129,50 @@ tag_t *find_tag(void *tagp, int tagl, uint8 id, int len, uint8* vid, int vlen)
 };
 
 
+int get_oui_vendor(void *tagp, int tagl, uint8 oui[3])
+{
+	#define MIN_OUI_TAG_LEN	6
+	#define MAX_OUI_TAG_LEN	9
+	#define SINGLETON_LEN	10
+
+	uint8 singleton[3] = "\x00\x03\x7f";
+
+	tag_t *tag = (tag_t*)tagp;
+	while (0 < tagl) {
+		if (tag->id != TAG_VEND)
+			goto next_tag;
+		if (tag->len >= MIN_OUI_TAG_LEN && tag->len <= MAX_OUI_TAG_LEN) {
+			if (tag->data[3] == 2 ||
+				tag->data[3] == 4 ||
+				tag->data[3] == 7 ||
+				tag->data[3] == 1 ||
+				tag->data[3] == 0 ||
+				tag->data[3] == 3) {
+
+				memcpy(oui, tag->data, 3);
+				return 1;
+			} else {
+				goto next_tag;
+			};
+		} else {
+			if (tag->len == SINGLETON_LEN && !memcmp(singleton, tag->data, 3)) {
+				memcpy(oui, tag->data, 3);
+				return 1;
+			} else {
+				goto next_tag;
+			};
+		};
+
+next_tag:
+		tagl -= tag->len + TAG_SIZE;
+		tag = (tag_t*)((uint8*)tag + tag->len + TAG_SIZE);
+	};
+	if (tagl)
+		vprint("[!] Information element tag(s) extend past end of frame\n");
+	return 0;
+};
+
+
 vtag_t *find_vtag(void *vtagp, int vtagl, uint8* vid, int vlen)
 {
 	vtag_t *vtag = (vtag_t*)vtagp;
diff --git a/src/80211.h b/src/80211.h
index b6035ab..046045f 100644
--- a/src/80211.h
+++ b/src/80211.h
@@ -250,13 +250,15 @@ typedef struct ie_tag tag_t;
 
 struct ie_vtag {
 	uint16		id;
-#define	TAG_WPS_VERSION	"\x10\x4A"
 #define	TAG_WPS_STATE	"\x10\x44"
+#define	TAG_WPS_V_EXT	"\x10\x49"
+#define	TAG_WPS_VERSION	"\x10\x4A"
 #define	TAG_WPS_APLOCK	"\x10\x57"
 	uint16		len;
 	uint8		data[];
-#define	TAG_WPS_CONFIG	2
+#define	TAG_WPS_V2		0
 #define	TAG_WPS_LOCKED	1
+#define	TAG_WPS_CONFIG	2
 };
 typedef struct ie_vtag vtag_t;
 #define	VTAG_SIZE (sizeof(vtag_t))
diff --git a/src/Makefile b/src/Makefile
index 8f49103..6b35c0a 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -17,7 +17,7 @@ SRCS	= $(W_NAME).c 80211.c frame.c iface.c crc32.c timer.c utils.c
 all: $(W_NAME)
 
 $(W_NAME): $(HDRS) $(SRCS)
-	$(CC) $(CFLAGS) -o $(@) $(W_NAME).c $(LDFLAGS)
+	$(CC) $(CFLAGS) -o $(@) $(W_NAME).c pdust.c $(LDFLAGS)
 
 strip: $(W_NAME)
 	strip $(W_NAME)
diff --git a/src/bully.c b/src/bully.c
index 55eb11b..3d52f1f 100644
--- a/src/bully.c
+++ b/src/bully.c
@@ -1,6 +1,7 @@
 /*
     bully - retrieve WPA/WPA2 passphrase from a WPS-enabled AP
 
+	Copyright (C) 2017  wiire         <wi7ire@gmail.com>
     Copyright (C) 2012  Brian Purcell <purcell.briand@gmail.com>
 
     This program is free software: you can redistribute it and/or modify
@@ -81,6 +82,7 @@
 #include "frame.h"
 #include "iface.h"
 #include "bully.h"
+#include "pdust.h"
 
 sig_atomic_t ctrlc = 0;
 sig_atomic_t signm = 0;
@@ -619,6 +621,15 @@ int main(int argc, char *argv[])
 	tags[tn++] = (tag_t*)MS_WPS_TAG;
 	tags[tn] = NULL;
 
+	{ /* Get vendor OUI from frame when present */
+		uint8 oui[3];
+		if (get_oui_vendor(tag, tlen, oui)) {
+			char vendor[OUI_STR_LEN];
+			memcpy(vendor, get_vendor(oui), OUI_STR_LEN);
+			vprint("[+] Vendor '%s' (%02x:%02x:%02x)\n", vendor, oui[0], oui[1], oui[2]);
+		};
+	}
+
 	if ((tag = find_tag(tag, tlen, TAG_VEND, 0, MS_WPS_ID, 4)) == NULL) {
 		vprint("[X] The AP doesn't appear to be WPS enabled (no WPS IE)\n");
 		return 5;
@@ -634,6 +645,15 @@ int main(int argc, char *argv[])
 	if (vt && vt->data[0] == TAG_WPS_LOCKED) {
 		vprint("[!] Beacon information element indicates WPS is locked\n");
 	};
+	if (vt = find_vtag(vtag, vlen, TAG_WPS_V_EXT, 2)) {
+		uint8 *v2 = (uint8 *)(vt->data + 3);
+		if (*v2++ == TAG_WPS_V2)
+			if (*v2++ == 1)
+				vprint("[+] WPS version '%u.%u'\n", *v2 >> 4, *v2 & 0x0f);
+	} else {
+		/* Assume version 1 (some APs may report version 0) */
+		vprint("[+] WPS version '1.0'\n");
+	};
 
 	int msgl;  uint8 *msg = build_ietags(tags, &msgl);
 	G->asshat = build_packet(asshat,sizeof(asshat)-1,msg,msgl);
diff --git a/src/pdust.c b/src/pdust.c
new file mode 100644
index 0000000..dd6cd75
--- /dev/null
+++ b/src/pdust.c
@@ -0,0 +1,42 @@
+/*
+    bully - retrieve WPA/WPA2 passphrase from a WPS-enabled AP
+
+    Copyright (C) 2017  wiire         <wi7ire@gmail.com>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#include <stdint.h>
+#include <string.h>
+
+#include "pdust.h"
+
+char OUI_NULL[OUI_STR_LEN] = "-";
+vendor_t vendor_list[] = {
+	{"\x00\x03\x7f", "AtherosC", PWPS_NONE       }, /* Atheros Communications */
+	{"\x00\x10\x18", "Broadcom", PWPS_ECOS_SIMPLE}, /* Broadcom */
+	{"\x00\x50\x43", "MarvellS", PWPS_NONE       }, /* MARVELL SEMICONDUCTOR, INC */
+	{"\x00\x0c\x43", "RalinkTe", PWPS_RT         }, /* Ralink Technology, Corp. */
+	{"\x00\xe0\x4c", "RealtekS", PWPS_RTL819x    }  /* REALTEK SEMICONDUCTOR CORP. */
+};
+#define VENDOR_LIST_SIZE (sizeof(vendor_list) / sizeof(vendor_list[0]))
+
+char *get_vendor(uint8_t *oui)
+{
+	int i;
+	for (i = 0; i < VENDOR_LIST_SIZE; i++) {
+		if (!memcmp(vendor_list[i].oui, oui, 3))
+			return vendor_list[i].name;
+	};
+	return OUI_NULL;
+};
\ No newline at end of file
diff --git a/src/pdust.h b/src/pdust.h
new file mode 100644
index 0000000..bf5d571
--- /dev/null
+++ b/src/pdust.h
@@ -0,0 +1,45 @@
+/*
+    bully - retrieve WPA/WPA2 passphrase from a WPS-enabled AP
+
+    Copyright (C) 2017  wiire         <wi7ire@gmail.com>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#ifndef _PDUST_H
+#define _PDUST_H
+
+#include <stdint.h>
+
+/* Pixiewps modes */
+#define PWPS_NONE			0
+#define PWPS_RT				1
+#define PWPS_ECOS_SIMPLE	2
+#define PWPS_RTL819x		3
+#define PWPS_ECOS_SIMPLEST	4
+#define PWPS_ECOS_KNUTH		5
+
+#define OUI_STR_LEN			8 + 1
+struct vendor_oui {
+	uint8_t	oui[3];
+	char	name[OUI_STR_LEN];
+	uint8_t	pixiewps_mode;
+};
+typedef struct vendor_oui vendor_t;
+
+extern char OUI_NULL[OUI_STR_LEN];
+extern vendor_t vendor_list[];
+
+char *get_vendor(uint8_t *oui);
+
+#endif /* _PDUST_H */
